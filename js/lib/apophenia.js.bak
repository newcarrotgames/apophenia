/**
 * Created by David Harris on 12/4/2014.
 */

// string.format()
if (!String.prototype.format) {
  String.prototype.format = function() {
    var args = arguments;
    return this.replace(/{(\d+)}/g, function(match, number) {
      return typeof args[number] != 'undefined'
        ? args[number]
        : match
      ;
    });
  };
}

var APOPHENIA = { version: '0.0.1'};

APOPHENIA.init = function(entityManager, starField) {
    if ( ! Detector.webgl ) Detector.addGetWebGLMessage();
    var container;
    var stats;
    var scene;
    var camera;
    var renderer;
    var controls;
    var clock = new THREE.Clock();

    container = document.createElement('div');
    document.body.appendChild(container);
    camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 2000 );
	camera.position.y = 1000;
    controls = new APOPHENIA.Controls(camera);
    controls.movementSpeed = 100;
    scene = new THREE.Scene();
    var light, object;
    scene.add( new THREE.AmbientLight(0x404040));
    light = new THREE.DirectionalLight(0xffffff);
    light.position.set(0, 1, 0);
    scene.add( light );

    // add object to origin so we always know where that is
    console.log('adding origin object to scene');
    origin = new THREE.Mesh(
        new THREE.BoxGeometry(5, 5, 5),
        new THREE.MeshLambertMaterial({
            ambient: 0xbbbbbb,
            map: THREE.ImageUtils.loadTexture('textures/microscheme.png'),
            side: THREE.DoubleSide }));
    origin.position.set(0, 0, 0);
    scene.add(origin);

    renderer = new THREE.WebGLRenderer( { antialias: true } );
    renderer.setSize( window.innerWidth, window.innerHeight );
    container.appendChild( renderer.domElement );
    stats = new Stats();
    stats.domElement.style.position = 'absolute';
    stats.domElement.style.top = '0px';
    container.appendChild( stats.domElement );
    window.addEventListener( 'resize', onWindowResize, false );
    camera.lookAt( scene.position );

    animate();

    function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize( window.innerWidth, window.innerHeight );
    }

    function animate() {
        requestAnimationFrame(animate);
        entityManager.updateEntities(clock.getDelta());
        controls.update(clock.getDelta());
        renderer.render( scene, camera );
        stats.update();
    }

    this.addEntityToScene = function(entity) {
        scene.add(entity.mesh);
    };
};